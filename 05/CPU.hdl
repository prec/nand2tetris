// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	
	/********************
	*******DECODER*******
	********************/
	
	//Instruction Bits
	Not(in=instruction[15], out=aInst);
	Not(in=aInst, out=cInst);
	
	//A Bit
	Or(a=false, b=instruction[12], out=aBit);
	
	//Computation Bits
	And(a=cInst, b=instruction[11], out=c1);
	And(a=cInst, b=instruction[10], out=c2);
	And(a=cInst, b=instruction[9], out=c3);
	And(a=cInst, b=instruction[8], out=c4);
	And(a=cInst, b=instruction[7], out=c5);
	And(a=cInst, b=instruction[6], out=c6);
	
	//Destination Bits
	And(a=cInst, b=instruction[5], out=destA);
	And(a=cInst, b=instruction[4], out=destB);
	And(a=cInst, b=instruction[3], out=destC);
	
	//Jump Bits
	And(a=cInst, b=instruction[2], out=jumpA);
	And(a=cInst, b=instruction[1], out=jumpB);
	And(a=cInst, b=instruction[0], out=jumpC);
	
	Xor(a=ng, b=zr, out=lte0);
	Or(a=zr, b=pos, out=gte0);
	Or(a=ng, b=pos, out=ne0);
	Not(in=lte0, out=pos);
	
	And(a=jumpA, b=jumpB, out=jumpAB);
	And(a=jumpB, b=jumpC, out=jumpBC);
	And(a=jumpA, b=jumpC, out=jumpAC);
	And(a=jumpAB, b=jumpC, out=jumpABC);
	
	And(a=jumpC, b=pos, out=jgt);
	And(a=jumpB, b=zr, out=jeq);
	And(a=jumpBC, b=gte0, out=jge);
	And(a=jumpA, b=ng, out=jlt);
	And(a=jumpAC, b=ne0, out=jne);
	And(a=jumpAB, b=lte0, out=jle);
	And(a=jumpABC, b=true, out=jmp);
	
	Not(in=jmp, out=nojmp);
	
	Or8Way(in[0]=jumpABC, in[1]=jgt, in[2]=jeq, in[3]=jge, in[4]=jlt, in[5]=jne, in[6]=jle, in[7]=jmp, out=loadPC);
	
	//Load Signals for Registers
	Or(a=aInst, b=destA, out=loadA);
	And(a=cInst, b=destB, out=loadD);
	And(a=cInst, b=destC, out=writeM);
	
	/****************************************
	*******DATA/ADDRESS IMPLEMENTATION*******
	****************************************/
	
	Mux16(a=aluOut, b=instruction, sel=aInst, out=inst);
	ARegister(in=inst, load=loadA, out=aOut, out[0..14]=addressM);
	Mux16(a=aOut, b=inM, sel=aBit, out=amOut);
	DRegister(in=aluOut, load=loadD, out=dOut);
	PC(in=aOut, inc=nojmp, load=loadPC, reset=reset, out[0..14]=pc);
	ALU(x=dOut, y=amOut, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, out=outM, out=aluOut, zr=zr, ng=ng);
}